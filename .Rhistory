rm(list=ls())
if(!require(geobr)){install.packages("geobr")}
if(!require(readxl)){install.packages("readxl")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(sf)){install.packages("sf")}
if(!require(gstat)){install.packages("gstat")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(fields)){install.packages("fields")}
if(!require(magick)){install.packages("magick")}
if(!require(purrr)){install.packages("purrr")}
temp <- read_excel("3_INTERPOLACAO.xlsx")
lista_temp<-list()
for (a in temp$Data) {
lista_temp[[a]]<-filter(temp, Data == a) %>% st_as_sf(coords = c('long', 'lat'),
crs=4674)
}
go<-read_state(code_state = "TO")
muni<-read_municipality(
code_muni = "TO",
year = 2010,
simplified = TRUE,
showProgress = TRUE
)
grade_go<-st_make_grid(go, cellsize = c(.3,.3)) %>% #TAMANHO DA GRADE
st_as_sf()%>%
filter(st_contains(go,., sparse = FALSE))
#-------------------------------------------------------------------------------
#                         GERANDO MODELO
#-------------------------------------------------------------------------------
modelo_list<-list()
for (x in 1:length(lista_temp)) {
modelo_list[[x]]<-gstat(formula = Umidade~1,
data=as(lista_temp[[x]],'Spatial'),
set=list(idp=3))
}
#-------------------------------------------------------------------------------
#                            PREVISAO
#-------------------------------------------------------------------------------
temp.int<-list()
for (y in 1:length(modelo_list)) {
temp.int[[y]]<-predict(modelo_list[[y]],as(grade_go,'Spatial'))%>%st_as_sf()
}
date_name<-names(lista_temp)
date_name<-names(lista_temp)
names(temp.int)<- c(date_name)
#-------------------------------------------------------------------------------
#                         GERANDO MAPAS
#-------------------------------------------------------------------------------
for (i in 1:length(temp.int)) {
names(temp.int)<- c(date_name)
map<-list()
map[[i]]<-ggplot(temp.int[[i]])+
geom_sf(aes(fill=var1.pred,col=var1.pred))+
geom_sf(data=go, fill= 'transparent')+
geom_sf(data=muni, fill= 'transparent', colour = "black")+
scale_color_gradientn(colors = tim.colors(50),
limits=c(0,80))+
scale_fill_gradientn(colors = tim.colors(50),
limits=c(0,80))+
theme_void()+
labs(
fill="%",
color="%",
subtitle = paste0(i,"/202X"))+
ggtitle(paste0("Úmidade Relativa (%)"))
ggsave(map[[i]], file=paste0("plot_", i,".png"), width = 14, height = 10, units = "cm")
}
iwalk(temp.int, function(dat, name){
st_write(obj = dat, dsn = paste0("C:/@IGOR/R/ANO_", name, ".shp"))
})
iwalk(temp.int, function(dat, name){
st_write(obj = dat, dsn = paste0("ANO_", name, ".shp"))
})
iwalk(temp.int, function(dat, name){
st_write(obj = dat, dsn = paste0("20XX_", name, ".shp"))
})
rm(list=ls())
if(!require(geobr)){install.packages("geobr")}
if(!require(readxl)){install.packages("readxl")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(sf)){install.packages("sf")}
if(!require(gstat)){install.packages("gstat")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(fields)){install.packages("fields")}
if(!require(magick)){install.packages("magick")}
if(!require(purrr)){install.packages("purrr")}
temp <- read_excel("3_INTERPOLACAO.xlsx")
lista_temp<-list()
for (a in temp$Data) {
lista_temp[[a]]<-filter(temp, Data == a) %>% st_as_sf(coords = c('long', 'lat'),
crs=4674)
}
go<-read_state(code_state = "TO")
muni<-read_municipality(
code_muni = "TO",
year = 2010,
simplified = TRUE,
showProgress = TRUE
)
grade_go<-st_make_grid(go, cellsize = c(.3,.3)) %>% #TAMANHO DA GRADE
st_as_sf()%>%
filter(st_contains(go,., sparse = FALSE))
#-------------------------------------------------------------------------------
#                         GERANDO MODELO
#-------------------------------------------------------------------------------
modelo_list<-list()
for (x in 1:length(lista_temp)) {
modelo_list[[x]]<-gstat(formula = Umidade~1,
data=as(lista_temp[[x]],'Spatial'),
set=list(idp=3))
}
#-------------------------------------------------------------------------------
#                            PREVISAO
#-------------------------------------------------------------------------------
temp.int<-list()
for (y in 1:length(modelo_list)) {
temp.int[[y]]<-predict(modelo_list[[y]],as(grade_go,'Spatial'))%>%st_as_sf()
}
date_name<-names(lista_temp)
names(temp.int)<- c(date_name)
#-------------------------------------------------------------------------------
#                         GERANDO MAPAS
#-------------------------------------------------------------------------------
for (i in 1:length(temp.int)) {
names(temp.int)<- c(date_name)
map<-list()
map[[i]]<-ggplot(temp.int[[i]])+
geom_sf(aes(fill=var1.pred,col=var1.pred))+
geom_sf(data=go, fill= 'transparent')+
geom_sf(data=muni, fill= 'transparent', colour = "black")+
scale_color_gradientn(colors = tim.colors(50),
limits=c(0,80))+
scale_fill_gradientn(colors = tim.colors(50),
limits=c(0,80))+
theme_void()+
labs(
fill="%",
color="%",
subtitle = paste0(i,"/202X"))+
ggtitle(paste0("Úmidade Relativa (%)"))
ggsave(map[[i]], file=paste0("plot_", i,".png"), width = 14, height = 10, units = "cm")
}
iwalk(temp.int, function(dat, name){
st_write(obj = dat, dsn = paste0("20XX_", name, ".shp"))
})
#Limpar memória
rm(list=ls(all=TRUE))
# Importando pacotes
library(raster)
library(rgdal)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/@IGOR/R/")
setwd("C:/@IGOR/R/")
RGB <- list.files(path="RGB", pattern = ".tif", full.names = TRUE)
SHP <- list.files(path="TALHAO", pattern = ".shp", full.names = TRUE)
INDICE <- list.files(path="NDVI", pattern = ".tif", full.names = TRUE)
RGB
SHP
INDICE
## Criando um lista vazia para as Imagens RGB
RGB_STACK<-c()
## Leitura de todas imagens na Pasta RGB
r_name <- list.files(path="RGB",full.names = F)
for(i in RGB){ RGB_STACK[[i]]<- stack(i)}
names(RGB_STACK)<- c(r_name)
RGB_STACK
NDVI_STACK<-c()
r_name1 <- list.files(path="NDVI",full.names = F)
for(g in INDICE){
NDVI_STACK[[g]]<- stack(g)}
names(NDVI_STACK)<- c(r_name1)
NDVI_STACK
bandas<-NDVI_STACK[[1]]
TALHAO<-c()
for(j in SHP){TALHAO[[j]]<- sf::st_read(j)}
sat_ndvi_list<-list() ## Criando uma lista para armazenar o produto dos cálculos
sat_ndvi <- (bandas[[1]] - bandas[[3]]) / (bandas[[1]] + bandas[[3]])
NDVI_STACK<- stack(sat_ndvi)
NDVI_STACK
plot(sat_ndvi)
CO<-TALHAO[[1]]
TA<-CO$TALHAO
output <- data.frame(t = TA)
dataoutput<-data.frame(data=r_name[1]) ##ALTERA O NÚMERO, PARA MUDAR A IMAGEM
output
dataoutput
names_data<-paste("RGB_",output$t,dataoutput$data)
LISTA<-list()
RGB_STACK
for (c in 1:length(output$t)) {LISTA[c]<- mask(RGB_STACK[[1]], CO[CO$TALHAO==output$t[c],])
}
names(LISTA)<- c(names_data)
LISTA
LISTA_NDVI<-list()
for (y in 1:length(output$t)) {LISTA_NDVI[y]<- mask(sat_ndvi, CO[CO$TALHAO==output$t[y],])
}
names_data2<-paste("NDVI_",output$t,dataoutput$data)
names(LISTA_NDVI)<- c(names_data2)
LISTA_NDVI
mapply(writeRaster, LISTA, names(LISTA), 'GTiff',overwrite= TRUE)
mapply(writeRaster, LISTA_NDVI, names(LISTA_NDVI), 'GTiff', overwrite= TRUE)
#Limpar memória
rm(list=ls(all=TRUE))
# Importando pacotes
library(raster)
library(rgdal)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/@IGOR/R/")
setwd("C:/@IGOR/R/")
RGB <- list.files(path="RGB", pattern = ".tif", full.names = TRUE)
SHP <- list.files(path="TALHAO", pattern = ".shp", full.names = TRUE)
INDICE <- list.files(path="NDVI", pattern = ".tif", full.names = TRUE)
RGB
SHP
INDICE
## Criando um lista vazia para as Imagens RGB
RGB_STACK<-c()
## Leitura de todas imagens na Pasta RGB
r_name <- list.files(path="RGB",full.names = F)
for(i in RGB){ RGB_STACK[[i]]<- stack(i)}
names(RGB_STACK)<- c(r_name)
RGB_STACK
NDVI_STACK<-c()
r_name1 <- list.files(path="NDVI",full.names = F)
for(g in INDICE){
NDVI_STACK[[g]]<- stack(g)}
names(NDVI_STACK)<- c(r_name1)
NDVI_STACK
bandas<-NDVI_STACK[[1]]
TALHAO<-c()
for(j in SHP){TALHAO[[j]]<- sf::st_read(j)}
sat_ndvi_list<-list() ## Criando uma lista para armazenar o produto dos cálculos
sat_ndvi <- (bandas[[1]] - bandas[[3]]) / (bandas[[1]] + bandas[[3]])
NDVI_STACK<- stack(sat_ndvi)
NDVI_STACK
plot(sat_ndvi)
CO<-TALHAO[[1]]
TA<-CO$TALHAO
output <- data.frame(t = TA)
dataoutput<-data.frame(data=r_name[1]) ##ALTERA O NÚMERO, PARA MUDAR A IMAGEM
output
dataoutput
names_data<-paste("RGB_",output$t,dataoutput$data)
LISTA<-list()
RGB_STACK
for (c in 1:length(output$t)) {LISTA[c]<- mask(RGB_STACK[[1]], CO[CO$TALHAO==output$t[c],])
}
names(LISTA)<- c(names_data)
LISTA
LISTA_NDVI<-list()
for (y in 1:length(output$t)) {LISTA_NDVI[y]<- mask(sat_ndvi, CO[CO$TALHAO==output$t[y],])
}
names_data2<-paste("NDVI_",output$t,dataoutput$data)
names(LISTA_NDVI)<- c(names_data2)
LISTA_NDVI
mapply(writeRaster, LISTA, names(LISTA), 'GTiff',overwrite= TRUE)
mapply(writeRaster, LISTA_NDVI, names(LISTA_NDVI), 'GTiff', overwrite= TRUE)
